name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
#pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'b1387354-0240-4d1a-b331-e8043b91cc6c' # DONE 
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'my-env'

stages:
  - stage: PipelineTest
    jobs:
      - job: Randomtest
        steps:
        - task: CmdLine@2
          inputs:
            script: 'echo Hello world'

# ------------------------------ TERRAFORM ----------------------------------------------------------
  - stage: InfraStandUp
    jobs:
      - job: BuildInfrastructure
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Initialize Terraform - terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              backendServiceArm:  'eq-march-sc'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'tfstate2377230974'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'test.terraform.tfstate'
              
          - task: TerraformTaskV4@4
            displayName: 'Validate code - terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

          - task: TerraformTaskV4@4
            displayName: 'Plan output - terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              environmentServiceNameAzureRM: 'eq-march-sc'
              
          # - task: TerraformTaskV4@4
          #   displayName: 'Apply configuration - terraform apply'
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'apply'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          #     environmentServiceNameAzureRM: 'eq-march-sc'

# ------------------------------ POSTMAN ----------------------------------------------------------
  # - stage: ToolsProvisioning
  #   jobs:
  #     - job: TestingToolSetup
  #       steps:
  #         - task: CmdLine@2
  #           displayName: 'Install node'
  #           inputs:
  #             script: 'sudo apt install nodejs'
              
  #         - task: CmdLine@2
  #           displayName: 'Ensure node is installed'
  #           inputs:
  #             script: 'nodejs --version'

  #         - task: CmdLine@2
  #           displayName: 'Install newman'
  #           inputs:
  #             script: 'npm install -g newman'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)'
              
              
  #         - task: CmdLine@2
  #           displayName: 'Ensure newman is installed'
  #           inputs:
  #             script: 'newman -v'

  #         - task: CmdLine@2
  #           displayName: 'Run Regression tests'
  #           continueOnError: true
  #           inputs:
  #             script: 'newman run regression_Postman.postman_collection.json -e Regression_env.postman_environment.json --delay-request 60000 --reporters cli,junit --reporter-junit-export TestPostMan/PostmanRegression.xml'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              
  #         - task: CmdLine@2
  #           displayName: 'Run Data validation tests'
  #           continueOnError: true
  #           inputs:
  #             script: 'newman run Data_Validation.postman_collection.json -e Validation_env.postman_environment.json --delay-request 60000 --reporters cli,junit --reporter-junit-export TestPostMan/PostmanRegression.xml'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

  #         - task: CmdLine@2
  #           displayName: 'ls -la'
  #           continueOnError: true
  #           inputs:
  #             script: 'ls -la'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

  #         - task: PublishTestResults@2
  #           inputs:
  #             testResultsFormat: 'JUnit'
  #             testResultsFiles: '*.xml'
  #             searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/TestPostMan'
  #             mergeTestResults: true
  #             testRunTitle: 'Postman Tests'
# ------------------------------ WEBAPP ----------------------------------------------------------

  - stage: ArchiveAppAndTests
    jobs:
      - job: Archive
        steps:
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/fakerapi-$(Build.BuildId).zip'
          - publish: '$(Build.ArtifactStagingDirectory)/fakerapi-$(Build.BuildId).zip'
            displayName: 'Upload fakerrestapi Package'
            artifact: fakerapi

          - task: ArchiveFiles@2
            displayName: 'Archive Selenium'
            inputs:
              rootFolderOrFile: 'automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/selenium.zip'
          - publish: '$(Build.ArtifactStagingDirectory)/selenium.zip'
            displayName: 'Upload selenium Package'
            artifact: selenium

  - stage:
    jobs:
        - deployment: WebAppDeploy
          displayName: WebApp Deployment
          environment:
            name: 'my-env'
            resourceType: VirtualMachine
          pool:
            vmImage: 'Ubuntu-latest'
          strategy:
            runOnce:
              deploy:
                 steps:
                  - task: AzureRmWebAppDeployment@4
                    inputs:
                      ConnectionType: 'AzureRM'
                      azureSubscription: 'eq-march-sc'
                      appType: 'webAppLinux'
                      WebAppName: 'myApplication-danszzzzz-AppService'
                      deployToSlotOrASE: true
                      ResourceGroupName: 'Azuredevops'
                      SlotName: 'production'
                      packageForLinux: '$(Pipeline.Workspace)/fakerapi/fakerapi-$(Build.BuildId).zip'
                      DeploymentType: 'zipDeploy'

        - deployment: VMDeploy
          displayName: Selenium Tests
          environment:
            name: 'my-env'
            resourceType: VirtualMachine
          strategy:
            runOnce:
              deploy:
                steps:
                - download: current
                  artifact: selenium

                - task: Bash@3
                  inputs:
                    targetType: 'inline'
                    script: |           
                      # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
                      !#/bin/bash
                      
                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip unzip chromium-browser -y
                      pip3 install selenium
                      wget https://chromedriver.storage.googleapis.com/100.0.4896.20/chromedriver_linux64.zip
                      unzip chromedriver_linux64.zip
                      sudo mv chromedriver /usr/bin/chromedriver
                      sudo chown root:root /usr/bin/chromedriver && sudo chmod +x /usr/bin/chromedriver
                      export PATH=$PATH:/usr/bin/chromedriver   

                      # NEED TO GET LOG ANALyTIC workspace enabled

                      unzip $(Pipeline.Workspace)/selenium/selenium.zip .
                      sudo mkdir logs
                      # TO CONTINUE