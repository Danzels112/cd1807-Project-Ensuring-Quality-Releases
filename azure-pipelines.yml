name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
#pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'b1387354-0240-4d1a-b331-e8043b91cc6c' # DONE 
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'my-env'

stages:
  - stage: PipelineTest
    jobs:
      - job: Randomtest
        steps:
        - task: CmdLine@2
          inputs:
            script: 'echo Hello world'
  
  - stage: InfraStandUp
    jobs:
      - job: BuildInfrastructure
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Initialize Terraform - terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              backendServiceArm: 'Training-Sub-01 (601c9c7b-8f40-476f-92b1-3b437e0aef1d)'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'tfstate2377230974'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'test.terraform.tfstate'
              
          - task: TerraformTaskV4@4
            displayName: 'Validate code - terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

          - task: TerraformTaskV4@4
            displayName: 'Plan output - terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
              
          # - task: TerraformTaskV4@4
          #   displayName: 'Apply configuration - terraform apply'
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'apply'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

  # - stage: ToolsProvisioning
  #   jobs:
  #     - job: TestingToolSetup
  #       steps:
  #         - task: CmdLine@2
  #           displayName: 'Install node'
  #           inputs:
  #             script: 'sudo apt install nodejs'
              
  #         - task: CmdLine@2
  #           displayName: 'Ensure node is installed'
  #           inputs:
  #             script: 'nodejs --version'

  #         - task: CmdLine@2
  #           displayName: 'Install newman'
  #           inputs:
  #             script: 'npm install -g newman'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)'
              
              
  #         - task: CmdLine@2
  #           displayName: 'Ensure newman is installed'
  #           inputs:
  #             script: 'newman -v'

  #         - task: CmdLine@2
  #           displayName: 'Run Regression tests'
  #           continueOnError: true
  #           inputs:
  #             script: 'newman run regression_Postman.postman_collection.json -e Regression_env.postman_environment.json --delay-request 60000 --reporters cli,junit --reporter-junit-export TestPostMan/PostmanRegression.xml'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              
  #         - task: CmdLine@2
  #           displayName: 'Run Data validation tests'
  #           continueOnError: true
  #           inputs:
  #             script: 'newman run Data_Validation.postman_collection.json -e Validation_env.postman_environment.json --delay-request 60000 --reporters cli,junit --reporter-junit-export TestPostMan/PostmanRegression.xml'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

  #         - task: CmdLine@2
  #           displayName: 'ls -la'
  #           continueOnError: true
  #           inputs:
  #             script: 'ls -la'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

  #         - task: PublishTestResults@2
  #           inputs:
  #             testResultsFormat: 'JUnit'
  #             testResultsFiles: '*.xml'
  #             searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/TestPostMan'
  #             mergeTestResults: true
  #             testRunTitle: 'Postman Tests'


  # - stage: ArchiveAppAndTests
  #   jobs:
  #     - job: Archive
  #       steps:
  #         - task: ArchiveFiles@2
  #           inputs:
  #             rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
  #             includeRootFolder: false
  #             archiveType: 'zip'
  #             archiveFile: '$(Build.ArtifactStagingDirectory)/fakerapi-$(Build.BuildId).zip'
  #             verbose: true

  #         - task: PublishPipelineArtifact@1
  #           displayName: FakerAPI artifact
  #           inputs:
  #             targetPath: '$(Build.ArtifactStagingDirectory)/fakerapi-$(Build.BuildId).zip'
  #             artifact: fakerapi

  # - stage: AppServiceDeploy
  #   displayName: WebApp stand-up
  #   jobs:
  #   - deployment: fakerapi
  #     pool:
  #       vmImage: 'ubuntu-20.04'
  #     environment: 'my-env'
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - task: AzureWebApp@1
  #             inputs:
  #               azureSubscription: '$(azureServiceConnectionId)'
  #               appType: 'webAppLinux'
  #               appName: 'myApplication-danszzz-AppService'
  #               deployToSlotOrASE: true
  #               resourceGroupName: 'Azuredevops'
  #               slotName: 'production'
  #               package: '$(Pipeline.Workspace)/fakerapi/fakerapi-$(Build.BuildId).zip'
                
  # - stage: WebAppDeployment
  #   displayName: Web App Deployment
  #   jobs:
  #   - deployment: FakeRestAPI
  #     pool:
  #       vmImage: 'Ubuntu-20.04'
  #     environment: 'my-env'
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - task: AzureWebApp@1
  #             displayName: 'Deploy Azure Web App'
  #             inputs:
  #               azureSubscription: '$(azureServiceConnectionId)'
  #               appType: 'webApp'
  #               appName: 'myApplication-danszzz-AppService'
  #               package: '$(Pipeline.Workspace)/fakerapi/fakerapi-$(Build.BuildId).zip'
  #               deploymentMethod: 'auto'


